# Por último se grafican los histogramas para los distintos tamaños muestrales
densi<-rnorm( m,mean = mean(muchasMedias_25), sd=sqrt(var(muchasMedias_25)))
g1<-ggplot() +  geom_density(aes(muchasMedias_25, fill='n=25')) +
geom_density(aes(densi, fill='Normal'), alpha=0.5) +
scale_fill_manual(values=color[(1:2)]) +
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
densi<-rnorm( m,mean = mean(muchasMedias_50), sd=sqrt(var(muchasMedias_50)))
g2<-ggplot() +  geom_density(aes(muchasMedias_50, fill='n=50')) +
geom_density(aes(densi, fill='Normal'), alpha=0.5) +
scale_fill_manual(values=color[(1:2)]) +
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
densi<-rnorm( m,mean = mean(muchasMedias_100), sd=sqrt(var(muchasMedias_100)))
g3<-ggplot() +  geom_density(aes(muchasMedias_100, fill='n=100')) +
geom_density(aes(densi, fill='Normal'), alpha=0.5) +
scale_fill_manual(values=color[(1:2)]) +
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
densi<-rnorm( m,mean = mean(muchasMedias_1000), sd=sqrt(var(muchasMedias_1000)))
g4<-ggplot() +  geom_density(aes(muchasMedias_1000, fill='n=1000')) +
geom_density(aes(densi, fill='Normal'), alpha=0.5) +
scale_fill_manual(values=color[(1:2)]) +
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
ggarrange(g1,g2,g3,g4)
#Primero se crea una funcion que calcula  las medias para el muestreo de la Weibull
mediaMuestral <- function(n,shape=1.2,scale=0.5){
muestra <- rweibull(n,shape = shape,scale = scale)
media <- mean(muestra)
return(media)
}
# Ahora se repite el proceso 1,000 veces para tener una distribución de la media de la variable
#aleatoria que se crea mediante el sampleo de la distribución para distinto tamaño de n:
m <- 100
muchasMedias_25 <- replicate(m,mediaMuestral(n=25))
muchasMedias_50 <- replicate(m,mediaMuestral(n=50))
muchasMedias_100 <- replicate(m,mediaMuestral(n=100))
muchasMedias_1000 <- replicate(m,mediaMuestral(n=1000))
# Por último se grafican los histogramas para los distintos tamaños muestrales
densi<-rnorm( m,mean = mean(muchasMedias_25), sd=sqrt(var(muchasMedias_25)))
g1<-ggplot() +  geom_density(aes(muchasMedias_25, fill='n=25')) +
geom_density(aes(densi, fill='Normal'), alpha=0.5) +
scale_fill_manual(values=color[(1:2)]) +
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
densi<-rnorm( m,mean = mean(muchasMedias_50), sd=sqrt(var(muchasMedias_50)))
g2<-ggplot() +  geom_density(aes(muchasMedias_50, fill='n=50')) +
geom_density(aes(densi, fill='Normal'), alpha=0.5) +
scale_fill_manual(values=color[(1:2)]) +
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
densi<-rnorm( m,mean = mean(muchasMedias_100), sd=sqrt(var(muchasMedias_100)))
g3<-ggplot() +  geom_density(aes(muchasMedias_100, fill='n=100')) +
geom_density(aes(densi, fill='Normal'), alpha=0.5) +
scale_fill_manual(values=color[(1:2)]) +
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
densi<-rnorm( m,mean = mean(muchasMedias_1000), sd=sqrt(var(muchasMedias_1000)))
g4<-ggplot() +  geom_density(aes(muchasMedias_1000, fill='n=1000')) +
geom_density(aes(densi, fill='Normal'), alpha=0.5) +
scale_fill_manual(values=color[(1:2)]) +
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
ggarrange(g1,g2,g3,g4)
#Primero se crea una funcion que calcula  las medias para el muestreo de la Weibull
mediaMuestral <- function(n,shape=1.2,scale=0.5){
muestra <- rweibull(n,shape = shape,scale = scale)
media <- mean(muestra)
return(media)
}
# Ahora se repite el proceso 1,000 veces para tener una distribución de la media de la variable
#aleatoria que se crea mediante el sampleo de la distribución para distinto tamaño de n:
m <- 10000
muchasMedias_25 <- replicate(m,mediaMuestral(n=25))
muchasMedias_50 <- replicate(m,mediaMuestral(n=50))
muchasMedias_100 <- replicate(m,mediaMuestral(n=100))
muchasMedias_1000 <- replicate(m,mediaMuestral(n=1000))
# Por último se grafican los histogramas para los distintos tamaños muestrales
densi<-rnorm( m,mean = mean(muchasMedias_25), sd=sqrt(var(muchasMedias_25)))
g1<-ggplot() +  geom_density(aes(muchasMedias_25, fill='n=25')) +
geom_density(aes(densi, fill='Normal'), alpha=0.5) +
scale_fill_manual(values=color[(1:2)]) +
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
densi<-rnorm( m,mean = mean(muchasMedias_50), sd=sqrt(var(muchasMedias_50)))
g2<-ggplot() +  geom_density(aes(muchasMedias_50, fill='n=50')) +
geom_density(aes(densi, fill='Normal'), alpha=0.5) +
scale_fill_manual(values=color[(1:2)]) +
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
densi<-rnorm( m,mean = mean(muchasMedias_100), sd=sqrt(var(muchasMedias_100)))
g3<-ggplot() +  geom_density(aes(muchasMedias_100, fill='n=100')) +
geom_density(aes(densi, fill='Normal'), alpha=0.5) +
scale_fill_manual(values=color[(1:2)]) +
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
densi<-rnorm( m,mean = mean(muchasMedias_1000), sd=sqrt(var(muchasMedias_1000)))
g4<-ggplot() +  geom_density(aes(muchasMedias_1000, fill='n=1000')) +
geom_density(aes(densi, fill='Normal'), alpha=0.5) +
scale_fill_manual(values=color[(1:2)]) +
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
ggarrange(g1,g2,g3,g4)
-   Problema:
equipos <- c("Texas","Boston","Detroit","Kansas","St.","New_S.","New_Y.",
"Milwaukee","Colorado","Houston","Baltimore","Los_An.","Chicago",
"Cincinnati","Los_P.","Philadelphia","Chicago","Cleveland","Arizona",
"Toronto","Minnesota","Florida","Pittsburgh","Oakland","Tampa",
"Atlanta","Washington","San.F","San.I","Seattle")
numero_bateos <- c(5659, 5710, 5563, 5672, 5532, 5600, 5518, 5447, 5544, 5598,
5585, 5436, 5549, 5612, 5513, 5579, 5502, 5509, 5421, 5559,
5487, 5508, 5421, 5452, 5436, 5528, 5441, 5486, 5417, 5421)
runs <- c(855, 875, 787, 730, 762, 718, 867, 721, 735, 615, 708, 644, 654, 735,
667, 713, 654, 704, 731, 743, 619, 625, 610, 645, 707, 641, 624, 570,
593, 556)
datos <- data.frame(equipos,numero_bateos,runs)
head(datos)
knitr::opts_chunk$set(echo = FALSE, dev="cairo_pdf", fig.cap = FALSE,warning = FALSE,error = FALSE)
library(readr)
library(tidyverse)
library(factoextra)
library(stargazer)
library(xtable)
library(extrafont)
library(eph)
library(readxl)
library(formattable)
library(eph)
library(modeest)
library(kableExtra)
library(e1071)
#paleta de colores
color<- c('#e41a1c','#377eb8','#4daf4a','#a6cee3','#4575b4','#f781bf','#a65628','#ffff33','#984ea3','#ff7f00','#f781bf')
extrafont::font_import(prompt = FALSE)
extrafont::loadfonts(device = "pdf",quiet = T)
equipos <- c("Texas","Boston","Detroit","Kansas","St.","New_S.","New_Y.",
"Milwaukee","Colorado","Houston","Baltimore","Los_An.","Chicago",
"Cincinnati","Los_P.","Philadelphia","Chicago","Cleveland","Arizona",
"Toronto","Minnesota","Florida","Pittsburgh","Oakland","Tampa",
"Atlanta","Washington","San.F","San.I","Seattle")
head(datos)
equipos <- c("Texas","Boston","Detroit","Kansas","St.","New_S.","New_Y.",
"Milwaukee","Colorado","Houston","Baltimore","Los_An.","Chicago",
"Cincinnati","Los_P.","Philadelphia","Chicago","Cleveland","Arizona",
"Toronto","Minnesota","Florida","Pittsburgh","Oakland","Tampa",
"Atlanta","Washington","San.F","San.I","Seattle")
numero_bateos <- c(5659, 5710, 5563, 5672, 5532, 5600, 5518, 5447, 5544, 5598,
5585, 5436, 5549, 5612, 5513, 5579, 5502, 5509, 5421, 5559,
5487, 5508, 5421, 5452, 5436, 5528, 5441, 5486, 5417, 5421)
runs <- c(855, 875, 787, 730, 762, 718, 867, 721, 735, 615, 708, 644, 654, 735,
667, 713, 654, 704, 731, 743, 619, 625, 610, 645, 707, 641, 624, 570,
593, 556)
datos <- data.frame(equipos,numero_bateos,runs)
head(datos)
datos
datos %>% ggplot(mapping=aes(x=runs, y=numero_bateos)) + geom_point()
datos %>% ggplot(mapping=aes(x=runs, y=numero_bateos)) + geom_point() + geom_smooth()
datos %>% ggplot(mapping=aes(x=runs, y=numero_bateos)) +
geom_point() +
geom_smooth()+
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
datos %>% ggplot(mapping=aes(x=runs, y=numero_bateos)) +
geom_point() +
geom_smooth()+
xlab('Cantidad de runs') +
ylab('Cantidad de bateos')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
datos %>% ggplot(mapping=aes(x=runs, y=numero_bateos)) +
geom_point() +
geom_smooth(method = 'loess')+
xlab('Cantidad de runs') +
ylab('Cantidad de bateos')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
datos %>% ggplot(mapping=aes(x=runs, y=numero_bateos)) +
geom_point() +
geom_smooth(method = 'loess')+
xlab('Cantidad de runs') +
ylab('Cantidad de bateos')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
datos %>% ggplot(mapping=aes(x=runs, y=numero_bateos)) +
geom_point() +
geom_smooth(method = 'loess')+
xlab('Cantidad de runs') +
ylab('Cantidad de bateos')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
cor.test(datos$numero_bateos,datos$runs)
summary(cor.test(datos$numero_bateos,datos$runs))
summarise(cor.test(datos$numero_bateos,datos$runs))
stargazer::stargazer(cor.test(datos$numero_bateos,datos$runs))
cor.test(datos$numero_bateos,datos$runs)
sumary(cor.test(datos$numero_bateos,datos$runs))
sumarise(cor.test(datos$numero_bateos,datos$runs))
# Se realiza el test de correlación
cor.test(datos$numero_bateos,datos$runs,method = 'pearson',conf.level = 0.95)
lm(formula = datos$numero_bateos~datos$runs)
summary(lm(formula = datos$numero_bateos~datos$runs))
stargazer::stargazer(summary(lm(formula = datos$numero_bateos~datos$runs)))
#Instancio el modelo con los datos
modelo<-lm(formula = datos$numero_bateos~datos$runs)
summary(modelo)
stargazer::stargazer(modelo)
summary(modelo)
#Instancio el modelo con los datos
modelo<-lm(formula = datos$numero_bateos~datos$runs)
#summary(modelo)
stargazer::stargazer(modelo)
predict(object=modelo, newdata=datos, interval="confidence", level=0.95)
data_frame(predict(object=modelo, newdata=datos, interval="confidence", level=0.95))
data.
data.frame(predict(object=modelo, newdata=datos, interval="confidence", level=0.95))
datos_fit<-data.frame(predict(object=modelo, newdata=datos, interval="confidence", level=0.95))
datos_fit %>% ggplot() + geom_line(aes(x=fit))
datos_fit %>% ggplot() + geom_line(aes(x=datos$runs,y=fit))
datos_fit %>% ggplot() + geom_line(aes(x=datos$runs,y=fit)) + geom_line(aes(x=datos$runs,y=upper))
datos_fit
datos_fit %>% ggplot() + geom_line(aes(x=datos$runs,y=fit, color="Predicción puntual")) + geom_line(aes(x=datos$runs,y=upr, color="Upper"))
datos_fit %>% ggplot() + geom_line(aes(x=datos$runs,y=fit, color="Predicción puntual")) + geom_line(aes(x=datos$runs,y=upr, color="Limite superior al 95% NC")) + geom_line(aes(x=datos$runs,y=lwr, color="Limite inferior al 95% NC""))
datos_fit %>% ggplot() + geom_line(aes(x=datos$runs,y=fit, color="Predicción puntual")) + geom_line(aes(x=datos$runs,y=upr, color="Limite superior al 95% NC")) + geom_line(aes(x=datos$runs,y=lwr, color="Limite inferior al 95% NC"))
datos_fit %>% ggplot() + geom_line(aes(x=datos$runs,y=fit, color="Predicción puntual")) + geom_line(aes(x=datos$runs,y=upr, color="Limite superior al 95% NC")) + geom_line(aes(x=datos$runs,y=lwr, color="Limite inferior al 95% NC")) + geom_point(aes(x=datos$runs,y=datos$numero_bateos))
datos_fit %>% ggplot() + geom_line(aes(x=datos$runs,y=fit, color="Predicción puntual")) +
geom_line(aes(x=datos$runs,y=upr, color="Limite superior al 95% NC")) +
geom_line(aes(x=datos$runs,y=lwr, color="Limite inferior al 95% NC")) +
geom_point(aes(x=datos$runs,y=datos$numero_bateos)) +
xlab('Cantidad de runs') +
ylab('Cantidad de bateos')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
datos_fit
datos %>% ggplot(mapping=aes(x=runs, y=numero_bateos)) +
geom_point() +
geom_smooth(method = lm, formula = y~x)+
xlab('Cantidad de runs') +
ylab('Cantidad de bateos')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
datos %>% ggplot(mapping=aes(x=runs, y=numero_bateos)) +
geom_point() +
geom_smooth(method = lm, formula = y~x,show.legend = TRUE)+
xlab('Cantidad de runs') +
ylab('Cantidad de bateos')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
summary(modelo)
modelo$residuals
mean(modelo$residuals)
var(modelo$residuals)
hist(modelo$residuals)
plot(x=modelo$fitted.values,y=modelo$residuals)
hist(x=modelo$fitted.values,y=modelo$residuals)
#Linealidad y distribución normal de los residuos con media igual a 0
#Para demostrar esto se puede realizar un histograma de los residuos y graficar un qqplot.
hist(modelo$fitted.values)
#Linealidad y distribución normal de los residuos con media igual a 0
#Para demostrar esto se puede realizar un histograma de los residuos y graficar un qqplot.
hist(modelo$residuals)
qqplot(modelo$residuals)
qqnorm(modelo$residuals,)
qqplot(modelo$residuals,rnorm(100))
qqnorm(modelo$residuals)
hist(modelo$residuals)
qqnorm(modelo$residuals)
qqline(modelo$residuals, col = 2)
#Linealidad y distribución normal de los residuos con media igual a 0
#Para demostrar esto se puede realizar un histograma de los residuos y graficar un qqplot.
hist(modelo$residuals)
qqnorm(modelo$residuals)
qqline(modelo$residuals, col = 2)
#Por ultimo se puede ver la variabilidad de los residuos para conocer si
# Poseen la misma variabilidad independientemente del valor de X,
# es decir, se puede ver si el error es homocedástico
plot(x=modelo$fitted.values,y=modelo$residuals)
#Por ultimo se puede ver la variabilidad de los residuos para conocer si
# Poseen la misma variabilidad independientemente del valor de X,
# es decir, se puede ver si el error es homocedástico
plot(x=datos$runs,y=modelo$residuals)
install.packages("repmis")
url = "https://github.com/hllinas/DatosPublicos/blob/main/Estudiantes.Rdata?raw=false"
repmis::source_data(url)
datos <- Estudiantes
url = "https://github.com/hllinas/DatosPublicos/blob/main/Estudiantes.Rdata?raw=false"
repmis::source_data(url)
datos <- Estudiantes
datos
datos<- datos %>% filter(Observacion>=2&Observacion<=35)
datos2a35<- datos %>% filter(Observacion>=2&Observacion<=35)
datos2a35
summary(datos2a35)
datos
# Tamaño del dataframe:
length(datos2a35)
datos2a35
# Tamaño del dataframe:
length(datos2a35)
# Tamaño del dataframe:
size(datos2a35)
# Tamaño del dataframe:
ncol(datos2a35)
# Tamaño del dataframe:
nrow(datos2a35)
# Cantidad de observaciones del dataframe: 35
paste0('Cantidad de observaciones del DF: ', nrow(datos2a35))
paste0('Cantidad de variables del DF: ', ncol(datos2a35))
summarise(datos2a35)
class(datos2a35)
datos2a35$Sexo
#Definición de niveles:
levels<- c('Femenino','Masculino')
datos2a35$Sexo<- factor(datos2a35$Sexo,levels = levels)
paste0('Clase de variable Sexo: ', class(datos2a35$Sexo))
summary(datos2a35$Sexo)
#Definición de niveles:
levels<- c('Femenino','Masculino')
datos2a35$Sexo<- factor(datos2a35$Sexo,levels = levels)
paste0('Clase de variable Sexo: ', class(datos2a35$Sexo))
#Cantidad de alumnos por clase
summary(datos2a35$Sexo)
datos2a35 %>% geom_histogram(x=Sexo)
datos2a35 %>% ggplot() + geom_histogram(x=Sexo)
datos2a35 %>% ggplot() + geom_histogram(x=datos2a35$Sexo)
datos2a35 %>% group_by(Sexo) %>% summarise(cantidad=n())
sexo<-datos2a35 %>% group_by(Sexo) %>% summarise(cantidad=n())
sexo %>% ggplot(mapping=aes(x=Sexo,y=cantidad)) + geom_col()
sexo %>% ggplot(mapping=aes(x=Sexo,y=cantidad, fill=Sexo)) + geom_col()
sexo %>% ggplot(mapping=aes(x=Sexo,y=cantidad, fill=Sexo, label=cantidad)) + geom_col()
sexo %>% ggplot(mapping=aes(x=Sexo,y=cantidad, fill=Sexo, label=cantidad)) + geom_col() + geom_text()
sexo %>% ggplot(mapping=aes(x=Sexo,y=cantidad, fill=Sexo, label=cantidad)) + geom_col() + geom_text(position = position_nudge(y=2))
sexo %>% ggplot(mapping=aes(x=Sexo,y=cantidad, fill=Sexo, label=cantidad)) + geom_col() + geom_text(position = position_nudge(y=1))
sexo<-datos2a35 %>% group_by(Sexo) %>% summarise(cantidad=n())
sexo %>% ggplot(mapping=aes(x=Sexo,y=cantidad, fill=Sexo, label=cantidad)) +
geom_col() +
geom_text(position = position_nudge(y=1)) +
scale_fill_manual(values=color[(1:2)]) +
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
sexo %>% ggplot(mapping=aes(x=Sexo,y=cantidad, fill=Sexo, label=cantidad)) +
geom_col(show.legend = FALSE) +
geom_text(position = position_nudge(y=1)) +
scale_fill_manual(values=color[(1:2)]) +
xlab('') +
ylab('frecuencia')+
theme(text=element_text(family="LM Roman 10"),
panel.background = element_blank() ,
axis.line = element_line(colour = 'BLACK'),
axis.ticks = element_line(colour = 'BLACK'),legend.position = 'bottom',
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text( hjust = 0.5),
legend.title  = element_blank())
sexo
sexo %>% kbl( caption = "Tabla de frecuencias por Sexo", booktabs = T,align='c') %>%
kable_styling(latex_options = c("striped", "hold_position")) %>%
column_spec(1,bold = TRUE)
sexo
sexo %>% mutate(proporcion=cantidad/sum(sexo$cantidad))
sexo %>% mutate(proporcion=formattable::percent(cantidad/sum(sexo$cantidad)))
sexo<-sexo %>% mutate(proporcion=formattable::percent(cantidad/sum(sexo$cantidad)))
sexo %>% kbl( caption = "Tabla de frecuencias y proporción por Sexo", booktabs = T,align='c') %>%
kable_styling(latex_options = c("striped", "hold_position")) %>%
column_spec(1,bold = TRUE)
prop.test(datos2a35$Sexo, p = 0.3)
datos2a35$Sexo
prop.test(x = c(20,14),p = 0.3)
prop.test(x = c(20,14), n=c(34,34),p = 0.3)
prop.test(x = c(20,14), n=c(34),p = 0.3)
prop.test(x = c(20,14), n=c(34,34),p = 0.3)
prop.test(x = c(20,14), n=c(34,34),p = c(0.3,0.7))
x<-20
n<- 34
p_test=0.3
prop.test(x, n, p = NULL, alternative = 'less', correct = TRUE)
prop.test(x, n, p = p_test, alternative = 'less', correct = TRUE)
prop.test(x, n, p = p_test, alternative = 'less', correct = FALSE)
prop.test(x, n, p = p_test, alternative = 'greater', correct = TRUE)
rm(list=ls())
